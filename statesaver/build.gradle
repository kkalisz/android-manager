apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionName rootProject.ext.projectVersion
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        archivesBaseName = 'state-saver'
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}


task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.getDestinationDir()
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile "org.slf4j:slf4j-api:$rootProject.ext.slf4jVersion"
    androidTestCompile "com.android.support.test:runner:$rootProject.ext.junitRunnerVersion"
    androidTestCompile("com.android.support.test.espresso:espresso-core:$rootProject.ext.espressoCoreVersion", {
        exclude group: 'com.android.support'
    })
    testCompile "junit:junit:$rootProject.ext.junitVersion"
}

connectedCheck << {
    println '##teamcity[jacocoReport dataPath=\'statesaver/build/outputs/code-coverage/connected/coverage.ec\' includes=\'pl.kalisz.kamil*\' classpath=\'-:statesaver/build/intermediates/classes/androidTest//** +:statesaver/build/intermediates/classes/debug//**\']'
}
